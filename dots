#!/usr/bin/env bash
#
#         _       _
#        | |     | |
#      __| | ___ | |_ ___
#     / _` |/ _ \| __/ __|
#    | (_| | (_) | |_\__ \
#     \__,_|\___/ \__|___/
#
#
# Tasks for managing dotfiles.
#
# Example task group:
#
# desc example ""         - Optional. A short description for the task.
# _example_item() { : }   - Optional. The task to be run for each dotfile.
# example() { : }         - The task as it appears to the user
#
#
# desc example <<EOM
#   Example help text.
# EOM
# _example() {
#   echo $f
#   echo $source_file
#   echo $filename
#   echo $target_file
# }
# example() {
#   echo ">> Listing each dotfile in repository"
#   _each_dotfile _example
#   echo ">> Listing each dotfile in HOME"
#   _each_target_dotfile _example
# }


###############################################################################
# Environment
###############################################################################

# $_me
#
# Set to the command's basename.
_me=$(basename $0)


# Ensure that $DOTFILES is set in the environment.
if [[ -z $DOTFILES ]]; then
  echo "Error: \$DOTFILES must be set to your dotfiles directory" && exit 1
fi

# $source_dir
#
# Set to a 'home' directory adjacent to this command's enclosing directory.
source_dir=$DOTFILES/home

# $target_dir
#
# Set to $HOME in the environment.
target_dir=$HOME

###############################################################################
# Utility functions
###############################################################################

# desc()
#
# Usage:
#   desc task "description"
#
# Create a description for a specified task name. The task description text can
# be passed as the second argument or as standard input.
#
# To make the description text available to other functions, desc() assigns the
# text to a variable with the format $_desc_function_name
desc() {
  [[ -z $1 ]] && echo "desc: No task name specified." && exit 1
  if [[ -n $2 ]]; then
    read -d '' _desc_$1 <<EOM
$2
EOM
  else
    read -d '' _desc_$1
  fi
}

# _each_file()
#
# Iterate over the files in the specified directory and execute the specified
# function.
#
# Usage: _each_file directory function
_each_file() {
  per_file_function=$2
  for f in $1/.*
  do
    filename=$(basename "$f")
    source_file=$source_dir/$filename
    target_file=$target_dir/$filename
    if !( [[ "$filename" =~ ^\.?\.$ ]] ); then
      # Subfunctions can access the variables in this function, so it's not
      # necessary to pass them as arguments.
      $per_file_function
    fi
  done
}

# _each_dotfile()
#
# Iterate over the files in the source directory and execute the specified
# function.
#
# Usage: _each_dotfile function
_each_dotfile() {
  _each_file $source_dir $1
}

# _each_target_dotfile()
#
# Iterate over the files in the target directory and execute the specified
# function.
#
# Usage: _each_target_dotfile function
_each_target_dotfile() {
  _each_file $target_dir $1
}


# _function_exists()
#
# Takes a potential function name as an argument and returns whether a function
# exists with that name.
_function_exists() {
  [ `type -t $1`"" == 'function' ]
}

# _contains()
#
# Takes an item and a list and determines whether the list contains the item.
#
# Usage:
#   _contains "$list" "$item"
_contains() {
  [[ $1 =~ (^| )$2($| ) ]] && exit 0 || exit 1
}

###############################################################################
# Tasks
###############################################################################

# Configuration ###############################################################

# ----------------------------------------------------------- update_submodules

desc update_submodules <<EOM
Usage: $_me update_submodules

Update git submodules. An alias for the git command:
  git submodule foreach git pull
EOM
update_submodules() {
  git submodule foreach git pull
}

# ------------------------------------------------------------- update_homebrew

desc update_homebrew <<EOM
Usage: $_me update_homebrew

Update homebrew and homebrew cask using the brew.sh install script.

brew.sh location:
  $DOTFILES/script/packages/brew.sh

EOM
update_homebrew() {
  echo ">> Updating Homebrew formulas and casks..."
  $DOTFILES/script/packages/brew.sh
}

# ------------------------------------------------------------------ update_npm

desc update_npm <<EOM
Usage: $_me update_npm

Update node modules using the npm.sh script.

npm.sh location:
  $DOTFILES/script/packages/npm.sh

EOM
update_npm() {
  echo ">> Updating global npm modules..."
  $DOTFILES/script/packages/npm.sh
}

# ------------------------------------------------------------------ update_pip

desc update_pip <<EOM
Usage: $_me update_pip

Update Python pip packaages using the pip.sh script.

pip.sh location:
  $DOTFILES/script/packages/pip.sh

EOM
update_pip() {
  echo ">> Updating pip packages..."
  $DOTFILES/script/packages/pip.sh
}

# ------------------------------------------------------------- update_packages

desc update_packages <<EOM
Usage: $_me update_packages

Update Homebrew, Homebrew Cask, npm, and pip using each dedicated task:
  update_homebrew
  update_npm
  update_pip

For information about each task, see help for the individual tasks.
EOM
update_packages() {
  update_homebrew
  update_npm
  update_pip
}

# ------------------------------------------------------------- customize_icons

desc customize_icons <<EOM
Usage: $_me customize_icons

Customize icons of Homebrew-installed applications.

For more information, reference the following script:
  $DOTFILES/script/customizations/customize_icons.rb
EOM
customize_icons() {
  echo ">> Customizing icons of Homebrew-installed applications..."
  $DOTFILES/script/customizations/customize_icons.rb
}

# --------------------------------------------------------------- configure_osx

desc configure_osx <<EOM
Usage: $_me configure_osx

Set various preferences for OS X and default Apple applications.

For more information, reference the following script:
  $DOTFILES/script/config/osx.sh
EOM
configure_osx() {
  echo ">> Configuring OS X preferences..."
  $DOTFILES/script/config/osx.sh
}

# ---------------------------------------------------------- configure_osx_apps

desc configure_osx_apps <<EOM
Usage: $_me configure_osx

Set various preferences for non-default OS X applications.

For more information, reference the following script:
  $DOTFILES/script/config/osx_apps.sh
EOM
configure_osx_apps() {
  echo ">> Configuring OS X application preferences..."
  $DOTFILES/script/config/osx_apps.sh
}

# Dotfiles ####################################################################

# ------------------------------------------------------------------------ list

desc list <<EOM
Usage: $_me list [filename]

List all dotfiles from in the home directory.

If 'tracked' or 'untracked' as passed as arguments to 'list', then those tasks are run.

If a dotfile name is passed as the second argument, then a listing is printed for that item.

Indicator prefixes display information about the type and status of each entry:
  d   - Directory
  @   - Symbolic link
  @ i - Symbolic link to tracked file.
EOM
_list_item() {
  if [[ -L $f ]]; then
    if [[ "$(readlink $f)" == "$source_file" ]]; then
      echo "@  i   $filename"
    else
      echo "@      $filename"
    fi
  elif [[ -d $f ]]; then
    echo "d      $filename"
  elif [[ -a $f ]]; then
    echo "       $filename"
  fi

}
list() {
  if [[ "$1" == "untracked" ]]; then
    untracked
  elif [[ "$1" == "tracked" ]]; then
    tracked
  elif [[ "$1" =~ ^\.(.*) ]]; then
    local f="$target_dir/$1"
    if [[ -a "$f" ]]; then
      filename=$(basename "$f")
      source_file=$source_dir/$filename
      target_file=$target_dir/$filename
      _list_item
    else
      echo "File not found." && exit 1
    fi
  else
    _each_target_dotfile _list_item
  fi
}

# ------------------------------------------------------------------- untracked

desc untracked <<EOM
Usage: $_me untracked

List all untracked dotfiles from in the home directory.

Indicator prefixes display information about the type and status of each entry:
  d   - Directory
  @   - Symbolic link
EOM
_untracked_item() {
  if [[ -L $f ]];then
    if !( [[ "$(readlink $f)" == "$source_file" ]] ); then
      echo "@      $filename"
    fi
  elif [[ -d $f ]]; then
    echo "d      $filename"
  elif [[ -a $f ]]; then
    echo "       $filename"
  fi
}
untracked() {
  _each_target_dotfile _untracked_item
}

# --------------------------------------------------------------------- tracked

desc tracked <<EOM
Usage: $_me tracked

List all tracked dotfiles from in the home directory.

Indicator prefixes display information about the type and status of each entry:
  @ i - Symbolic link to tracked file.
EOM
_tracked_item() {
  if ( [[ -L $f ]] && \
       [[ "$(readlink $f)" == "$source_file" ]]
  ); then
    echo "@  i   $filename"
  fi

}
tracked() {
  _each_target_dotfile _tracked_item
}

# ------------------------------------------------------------------------- add

desc add <<EOM
Usage: $_me add filename

Add the specified dotfile to the dotfiles repository and link.
EOM
add() {
  if [[ $# = 0 ]]; then
    echo "Error: must specify a valid file or directory name." && exit 1
  elif [[ ! -a $1 ]]; then
    echo "Error: file or directory does not exist." && exit 1
  else
    filename=$(basename $1)
    target_file=$target_dir/$filename
    source_file=$source_dir/$filename
    if [[ ! -a $source_file ]]; then
      echo "file does not exist"
    elif [[ ! -L $target_file ]]; then
      echo "file is not a symlink"
    else
      mv $target_file $source_dir
      echo "Linking $source_file => $target_file"
      ln -s $source_file $target_file
    fi
  fi
}

# --------------------------------------------------------------------- restore

desc restore <<EOM
Usage: $_me restore filename

Unlink the specified file and move from the dotfiles repository back to $HOME"
EOM
restore() {
  if [[ $# = 0 ]]; then
    echo "Error: must specify a valid file or directory name." && exit 1
  elif [[ ! -a $1 ]]; then
    echo "Error: file or directory does not exist." && exit 1
  else
    filename=$(basename $1)
    target_file=$target_dir/$filename
    source_file=$source_dir/$filename
    if [[ ! -a $source_file ]]; then
      echo "file does not exist"
    elif [[ ! -L $target_file ]]; then
      echo "file is not a symlink"
    else
      rm $target_file
      mv $source_file $target_file
      echo "Restored: $source_file => $target_file"
    fi
  fi
}

# ---------------------------------------------------------------------- status

desc status <<EOM
Usage: $_me status

List status of added dotfiles relative to the corresponding tracked file.

Indicator prefixes display information about the status of each entry:
  i   - Identical, indicating a valid symbolic link to the tracked file
   e  - A file exists, but it not linked to tracked file
    x - No file exists
EOM
_status_item() {
  if ( [[ -L $target_file ]] && \
       [[ "$(readlink $target_file)" == "$f" ]]
  ); then
    echo "i   $filename"
  elif [[ -a $target_file ]]; then
    echo " e  $filename"
  else
    echo "  x $filename"
  fi
}
status() {
  _each_dotfile _status_item
}

# ------------------------------------------------------------------------ link

desc link <<EOM
Usage: $_me link [filename]

Link dotfiles to home directory. Existing files skipped.

If a filename is passed to the link task, then it only acts on that file.
EOM
_link_item() {
  if [[ -a $target_file ]]; then
    echo Exists: $filename
  else
    echo "Linking $f => $target_file"
    ln -s $f $target_file
  fi
}
link() {
  if [[ -n "$1" ]]; then
    local f="$source_dir/$1"
    filename=$(basename "$1")
    source_file=$source_dir/$filename
    target_file=$target_dir/$filename
    if [[ -a "$source_file" ]]; then
      _link_item
    fi
  else
    _each_dotfile _link_item
  fi
}

# ---------------------------------------------------------------------- unlink

desc clean <<EOM
Usage: $_me unlink [filename]

Remove dotfile links in home directory with status 'i'

If a filename is passed to the unlink task, then it only acts on that file.
EOM
_unlink_item() {
  if ( [[ -L $target_file ]] && \
       [[ "$(readlink $target_file)" == "$f" ]]
  ); then
    echo "Removing link: $target_file"
    rm $target_file
  fi
}
unlink() {
  if [[ -n "$1" ]]; then
    local f="$source_dir/$1"
    filename=$(basename "$1")
    source_file=$source_dir/$filename
    target_file=$target_dir/$filename
    _unlink_item
  else
    _each_dotfile _unlink_item
  fi
}

# Utilties ####################################################################

desc edit <<EOM
Usage: $_me edit

Opens the the dotfiles directory in your \$EDITOR, currently set to '$EDITOR'.
EOM
edit() {
  $EDITOR $DOTFILES
}

desc dir <<EOM
Usage: $_me dir

Prints the current value of \$DOTFILES
EOM
dir() {
  echo "$DOTFILES"
}


# Help ########################################################################

desc help <<EOM
Usage: $_me help [task]

Display help information for the dotfiles command or a specified task.
EOM
help() {
  if [[ $# = 0 ]]; then
    cat <<EOM
         _       _
        | |     | |
      __| | ___ | |_ ___
     / _\` |/ _ \\| __/ __|
    | (_| | (_) | |_\\__ \\
     \\__,_|\\___/ \\__|___/

Tasks for managing OS X dotfiles and environment config.

Usage:
  $_me [task]

Task help:
  $_me help [task]

$(tasks)
EOM
 else
   var="_desc_$1"
   if [[ -n ${!var} ]]; then
     echo "${!var}"
   else
    echo "No additional information for $1"
   fi
 fi
}

# Task List ###################################################################

desc tasks <<EOM
Usage: $_me tasks [--raw]

Display the list of available tasks.
EOM
tasks() {
  [[ ! $1 == "--raw" ]] && echo "Available tasks:"
  function_list=($(declare -F))
  task_list=()
  for t in ${function_list[@]}
  do
    if !( [[ $t == "declare" ]] || \
          [[ $t == "-f" ]] || \
          [[ "$t" =~ ^_(.*) ]] || \
          [[ "$t" == "desc" ]]
    ); then
      task_list+="$t "
    fi
  done
  if [[ $1 == "--raw" ]]; then
    echo $task_list
  else
    for i in ${task_list[@]}; do echo "  $i"; done
  fi
}

###############################################################################
# Main
###############################################################################

_dotfiles_main() {
  if ( [[ $# = 0 ]] || [[ $1 == "-h" ]] ); then
    help
    exit 0
  elif ( _contains "$(tasks --raw)" $1 ); then
    eval $@
    exit 0
  else
    echo "Error: task not found."
    exit 1
  fi
}

# run _dotfiles_main function to start program.
_dotfiles_main $@

